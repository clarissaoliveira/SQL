// Students at your hometown high school have decided to organize their social network using databases. So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema:

Highschooler ( ID, name, grade )
English: There is a high school student with unique ID and a given first name in a certain grade.

Friend ( ID1, ID2 )
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123).

Likes ( ID1, ID2 )
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present.
//


-Find the names of all students who are friends with someone named Gabriel.

SELECT name
FROM highschooler
WHERE ID IN
(
SELECT ID1
FROM friend
WHERE ID2 IN
(
SELECT ID
FROM highschooler
WHERE name = 'Gabriel'))


-Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. 
Sort by grade, then by name within each grade.

SELECT name, grade
FROM highschooler
WHERE ID NOT IN (SELECT ID1 FROM likes) AND ID NOT IN (SELECT ID2 FROM likes)
ORDER BY grade, name

-Find the name and grade of all students who are liked by more than one other student.

SELECT name, grade
FROM highschooler
WHERE ID IN
(
SELECT DISTINCT ID2
FROM likes
GROUP BY ID2
HAVING COUNT (ID2) > 1
	)

-Find the difference between the number of students in the school and the number of different first names.

SELECT COUNT(*) - COUNT(DISTINCT name)
FROM Highschooler
